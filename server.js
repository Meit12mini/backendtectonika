import dotenv from 'dotenv';
import express from 'express';
import fetch from 'node-fetch';
import cors from 'cors';
import { Telegraf } from 'telegraf';
import { google } from 'googleapis';
dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

// -------------------- Google API sheets ----------------------
async function appendLeadToSheet(lead) {
  const auth = new google.auth.GoogleAuth({
    keyFile: process.env.GOOGLE_SHEETS_CREDENTIALS,
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });

  const client = await auth.getClient();

  const sheets = google.sheets({ version: 'v4', auth: client });

  const values = [
    [
      new Date().toLocaleString(),
      lead.phone,
      lead.answers['1'] || '',
      lead.answers['2'] || '',
      lead.answers['3'] || '',
      lead.answers['4'] || '',
      lead.answers['5'] || '',
      lead.answers['6'] || '',
    ]
  ];

  const res = await sheets.spreadsheets.values.append({
    spreadsheetId: process.env.GOOGLE_SHEETS_ID,
    range: process.env.GOOGLE_SHEETS_RANGE,
    valueInputOption: 'USER_ENTERED',
    requestBody: { values },
  });

  console.log('–ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets:', res.data.updates.updatedRange);
}



// -------------------- Telegram --------------------
const RECAPTCHA_SECRET = process.env.RECAPTCHA_SECRET;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

const bot = TELEGRAM_BOT_TOKEN ? new Telegraf(TELEGRAM_BOT_TOKEN) : null;

// -------------------- API --------------------
app.post('/api/verify-captcha', async (req, res) => {
    const { token } = req.body;

    if (process.env.NODE_ENV === 'development') {
        console.log('–õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return res.json({ success: true, score: 1.0, action: 'local-test' });
    }

    if (!token) {
        return res.status(400).json({ success: false, error: 'Token is required' });
    }

    try {
        const verifyRes = await fetch(
            'https://www.google.com/recaptcha/api/siteverify',
            {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `secret=${RECAPTCHA_SECRET}&response=${token}`
            }
        );

        const data = await verifyRes.json();

        if (!data.success) {
            return res.status(400).json({ success: false, error: 'Invalid captcha' });
        }

        res.json({ success: true, score: data.score, action: data.action });
    } catch (err) {
        console.error(err);
        res.status(500).json({ success: false, error: 'Captcha verification failed' });
    }
});

app.post('/api/lead', async (req, res) => {
    try {
        const formData = req.body;

        if (!formData.answers || !formData.phone) {
            console.log('–ü–æ–ª—É—á–µ–Ω —Å–ª—É–∂–µ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return res.json({ success: true, message: '–°–ª—É–∂–µ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω' });
        }

        const processedLead = processLead(formData);

        console.log('–ù–æ–≤—ã–π –ª–∏–¥:', {
            phone: formData.phone,
            status: processedLead.leadStatus,
            answers: formData.answers
        });

        // ---------------- Telegram ----------------
        if (bot && TELEGRAM_CHAT_ID) {
            try {
                await bot.telegram.sendMessage(
                    TELEGRAM_CHAT_ID,
                    processedLead.telegramMessage,
                    { parse_mode: 'Markdown' }
                );
                console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
            } catch (tgError) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', tgError);
            }
        }

        // ---------------- WhatsApp (Wazzup API) ----------------
        const WAZZUP_API_KEY = process.env.WAZZUP_API_KEY;
        const WAZZUP_CHANNEL_ID = process.env.WAZZUP_CHANNEL_ID;
        const TO_NUMBER = process.env.WAZZUP_TO_NUMBER; // —Å–≤–æ–π –Ω–æ–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞

        if (WAZZUP_API_KEY && WAZZUP_CHANNEL_ID && TO_NUMBER) {
            try {
                const waRes = await fetch("https://api.wazzup24.com/v3/message", {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${WAZZUP_API_KEY}`,
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        channelId: WAZZUP_CHANNEL_ID,
                        chatType: "whatsapp",
                        chatId: TO_NUMBER,
                        text: processedLead.telegramMessage // –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ –¥–ª—è Telegram
                    })
                });
                const waData = await waRes.json();
                console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ WhatsApp:', waData);
            } catch (waError) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ WhatsApp —á–µ—Ä–µ–∑ Wazzup:', waError);
            }
        } else {
            console.warn('WAZZUP_API_KEY, CHANNEL_ID –∏–ª–∏ TO_NUMBER –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }

         // ---------------- Google Sheets ----------------
        try {
            await appendLeadToSheet(formData);
        } catch (sheetError) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets:', sheetError);
        }

        res.json({ success: true });

        
    } catch (err) {
        console.error(err);
        res.status(500).json({ success: false, error: 'Failed to save lead' });
    }
});

// -------------------- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞ --------------------
function processLead(leadData) {
    const { answers, phone } = leadData;
    const budget = answers['5'];
    const timeline = answers['6'];

    let leadStatus;

    if (
        (budget === '5-8 –º–ª–Ω ‚ÇΩ' || budget === '–ë–æ–ª–µ–µ 8 –º–ª–Ω ‚ÇΩ') ||
        timeline === '–í –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü'
    ) {
        leadStatus = 'üî• –ì–û–†–Ø–ß–ò–ô';
    } else if (
        (budget === '3-5 –º–ª–Ω ‚ÇΩ') ||
        timeline === '–í —Ç–µ—á–µ–Ω–∏–µ 3-6 –º–µ—Å—è—Ü–µ–≤'
    ) {
        leadStatus = 'üëç –¢–ï–ü–õ–´–ô';
    } else {
        leadStatus = '‚ùÑÔ∏è –•–û–õ–û–î–ù–´–ô';
    }

    const telegramMessage = `
üìå *–ù–æ–≤—ã–π –ª–∏–¥ (${leadStatus})* üìå

*–ö–æ–Ω—Ç–∞–∫—Ç:* [${phone}])

*–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:*
1. –î–ª—è –∫–æ–≥–æ: ${answers['1']}
2. –£—á–∞—Å—Ç–æ–∫: ${answers['2']}
3. –ü–ª–æ—â–∞–¥—å: ${answers['3']}
4. –ú–∞—Ç–µ—Ä–∏–∞–ª: ${answers['4']}
5. –ë—é–¥–∂–µ—Ç: ${answers['5']}
6. –°—Ä–æ–∫–∏: ${answers['6']}

*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:* ${getActionRecommendation(leadStatus)}
`.trim();

    return {
        leadStatus,
        telegramMessage
    };
}

function getActionRecommendation(status) {
    switch (status) {
        case 'üî• –ì–û–†–Ø–ß–ò–ô':
            return '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å! –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤—ã—Å–æ–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º.';
        case 'üëç –¢–ï–ü–õ–´–ô':
            return '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤. –ö–ª–∏–µ–Ω—Ç –≤ —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ —Å —Ö–æ—Ä–æ—à–∏–º –±—é–¥–∂–µ—Ç–æ–º.';
        case '‚ùÑÔ∏è –•–û–õ–û–î–ù–´–ô':
            return '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å. –ö–ª–∏–µ–Ω—Ç –Ω–∞ —Ä–∞–Ω–Ω–µ–π —Å—Ç–∞–¥–∏–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.';
        default:
            return '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.';
    }
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
    if (!TELEGRAM_BOT_TOKEN) {
        console.warn('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç');
    }
});