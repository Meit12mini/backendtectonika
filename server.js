import dotenv from 'dotenv';
import express from 'express';
import fetch from 'node-fetch';
import cors from 'cors';
import { Telegraf } from 'telegraf';

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const RECAPTCHA_SECRET = process.env.RECAPTCHA_SECRET;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const bot = TELEGRAM_BOT_TOKEN ? new Telegraf(TELEGRAM_BOT_TOKEN) : null;

// 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏
app.post('/api/verify-captcha', async (req, res) => {
  const { token } = req.body;
  
  if (!token) {
    return res.status(400).json({ success: false, error: 'Token is required' });
  }

  try {
    const verifyRes = await fetch(
      'https://www.google.com/recaptcha/api/siteverify',
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: `secret=${RECAPTCHA_SECRET}&response=${token}`
      }
    );

    const data = await verifyRes.json();

    if (!data.success) {
      return res.status(400).json({ success: false, error: 'Invalid captcha' });
    }

    res.json({ success: true, score: data.score, action: data.action });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, error: 'Captcha verification failed' });
  }
});

// 2) –ü—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ª–∏–¥–∞
app.post('/api/lead', async (req, res) => {
  try {
    const formData = req.body;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ answers –∏ phone (–≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å)
    if (!formData.answers || !formData.phone) {
      console.log('–ü–æ–ª—É—á–µ–Ω —Å–ª—É–∂–µ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return res.json({ success: true, message: '–°–ª—É–∂–µ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω' });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–∞
    const processedLead = processLead(formData);
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log('–ù–æ–≤—ã–π –ª–∏–¥:', {
      phone: formData.phone,
      status: processedLead.leadStatus,
      answers: formData.answers
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç)
    if (bot && TELEGRAM_CHAT_ID) {
      try {
        await bot.telegram.sendMessage(
          TELEGRAM_CHAT_ID, 
          processedLead.telegramMessage,
          { parse_mode: 'Markdown' }
        );
        console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
      } catch (tgError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', tgError);
      }
    }

    res.json({ 
      success: true, 
      message: '–õ–∏–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω',
      leadStatus: processedLead.leadStatus,
      clientMessage: processedLead.clientMessage
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, error: 'Failed to save lead' });
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞
function processLead(leadData) {
  const { answers, phone } = leadData;
  
  const budget = answers['5'];
  const timeline = answers['6'];
  
  let leadStatus;
  
  if (
    (budget === '5-8 –º–ª–Ω ‚ÇΩ' || budget === '–ë–æ–ª–µ–µ 8 –º–ª–Ω ‚ÇΩ') ||
    timeline === '–í –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü'
  ) {
    leadStatus = 'üî• –ì–û–†–Ø–ß–ò–ô';
  } else if (
    (budget === '3-5 –º–ª–Ω ‚ÇΩ') ||
    timeline === '–í —Ç–µ—á–µ–Ω–∏–µ 3-6 –º–µ—Å—è—Ü–µ–≤'
  ) {
    leadStatus = 'üëç –¢–ï–ü–õ–´–ô';
  } else {
    leadStatus = '‚ùÑÔ∏è –•–û–õ–û–î–ù–´–ô';
  }
  
  const telegramMessage = `
üìå *–ù–æ–≤—ã–π –ª–∏–¥ (${leadStatus})* üìå

*–ö–æ–Ω—Ç–∞–∫—Ç:* [${phone}](tel:${phone.replace(/\D/g, '')})

*–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:*
1. –î–ª—è –∫–æ–≥–æ: ${answers['1']}
2. –£—á–∞—Å—Ç–æ–∫: ${answers['2']}
3. –ü–ª–æ—â–∞–¥—å: ${answers['3']}
4. –ú–∞—Ç–µ—Ä–∏–∞–ª: ${answers['4']}
5. –ë—é–¥–∂–µ—Ç: ${answers['5']}
6. –°—Ä–æ–∫–∏: ${answers['6']}

*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:* ${getActionRecommendation(leadStatus)}
  `.trim();
  
  const clientMessage = leadStatus === 'üî• –ì–û–†–Ø–ß–ò–ô' 
    ? '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–∏–ª–∞ VIP-—Å—Ç–∞—Ç—É—Å. –ù–∞—à –ª—É—á—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —É–∂–µ –∏–∑—É—á–∞–µ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∏ —Å–∫–∏–¥–∫–∞ —É–∂–µ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è! –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ ¬´–¢–µ–∫—Ç–æ–Ω–∏–∫–∞¬ª.'
    : '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ê –ø–æ–∫–∞ –º—ã –≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å —Å–º–µ—Ç—É –∏ –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤. –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ ¬´–¢–µ–∫—Ç–æ–Ω–∏–∫–∞¬ª.';
  
  return {
    leadStatus,
    telegramMessage,
    clientMessage
  };
}

function getActionRecommendation(status) {
  switch(status) {
    case 'üî• –ì–û–†–Ø–ß–ò–ô':
      return '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å! –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤—ã—Å–æ–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º.';
    case 'üëç –¢–ï–ü–õ–´–ô':
      return '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤. –ö–ª–∏–µ–Ω—Ç –≤ —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ —Å —Ö–æ—Ä–æ—à–∏–º –±—é–¥–∂–µ—Ç–æ–º.';
    case '‚ùÑÔ∏è –•–û–õ–û–î–ù–´–ô':
      return '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å. –ö–ª–∏–µ–Ω—Ç –Ω–∞ —Ä–∞–Ω–Ω–µ–π —Å—Ç–∞–¥–∏–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.';
    default:
      return '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.';
  }
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  if (!TELEGRAM_BOT_TOKEN) {
    console.warn('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç');
  }
});